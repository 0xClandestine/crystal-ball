// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

abstract contract CrystalBall {}

/// @dev Creates a virtual-evm instance.
function virtualEvm() returns (CrystalBall instance) {
    bytes memory creationCode = HYVM_BYTECODE;
    assembly {
        instance := create(0, add(creationCode, 0x20), mload(creationCode))

        if iszero(instance) { revert(0, 0) }
    }
}

library Magic {
    function delegatecall(
        CrystalBall vevm,
        bytes memory bytecode,
        bytes4 selector,
        bytes memory callData
    ) internal returns (bytes memory) {
        (, bytes memory returnData) = address(vevm).delegatecall(
            abi.encodePacked(
                replaceFirst(
                    bytecode, abi.encodePacked(selector), (hex"00000000")
                ),
                bytes4(hex"00000000"),
                callData,
                bytecode.length
            )
        );

        return returnData;
    }

    /// @dev Must be using static vevm wrapper otherwise this will always revert.
    function staticcall(
        CrystalBall vevm,
        bytes memory bytecode,
        bytes4 selector,
        bytes memory callData
    ) internal view returns (bytes memory) {
        (, bytes memory returnData) = address(vevm).staticcall(
            abi.encodePacked(
                replaceFirst(
                    bytecode, abi.encodePacked(selector), (hex"00000000")
                ),
                bytes4(hex"00000000"),
                callData,
                bytecode.length
            )
        );

        return returnData;
    }

    /// @dev Modified from (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)
    function replaceFirst(
        bytes memory subject,
        bytes memory search,
        bytes memory replacement
    ) internal pure returns (bytes memory result) {
        assembly {
            let subjectLength := mload(subject)
            let searchLength := mload(search)
            let replacementLength := mload(replacement)

            // Store the mask for sub-word comparisons in the scratch space.
            mstore(0x00, not(0))
            mstore(0x20, 0)

            subject := add(subject, 0x20)
            search := add(search, 0x20)
            replacement := add(replacement, 0x20)
            result := add(mload(0x40), 0x20)

            let k := 0

            let subjectEnd := add(subject, subjectLength)
            if iszero(gt(searchLength, subjectLength)) {
                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)
                for {} lt(subject, subjectSearchEnd) {} {
                    let o := and(searchLength, 31)
                    // Whether the first `searchLength % 32` bytes of
                    // `subject` and `search` matches.
                    let l :=
                        iszero(
                            and(
                                xor(mload(subject), mload(search)),
                                mload(sub(0x20, o))
                            )
                        )
                    // Iterate through the rest of `search` and check if any word mismatch.
                    // If any mismatch is detected, `l` is set to 0.
                    for {} and(lt(o, searchLength), l) {} {
                        l := eq(mload(add(subject, o)), mload(add(search, o)))
                        o := add(o, 0x20)
                    }
                    // If `l` is one, there is a match, and we have to copy the `replacement`.
                    if l {
                        // Copy the `replacement` one word at a time.
                        for { o := 0 } lt(o, replacementLength) {
                            o := add(o, 0x20)
                        } {
                            mstore(
                                add(result, add(k, o)),
                                mload(add(replacement, o))
                            )
                        }
                        k := add(k, replacementLength)
                        subject := add(subject, searchLength)
                        // Stop after replacing the first instance.
                        break
                    }
                    // If `l` or `searchLength` is zero.
                    if iszero(mul(l, searchLength)) {
                        mstore(add(result, k), mload(subject))
                        k := add(k, 1)
                        subject := add(subject, 1)
                    }
                }
            }

            let resultRemainder := add(result, k)
            k := add(k, sub(subjectEnd, subject))
            // Copy the rest of the string one word at a time.
            for {} lt(subject, subjectEnd) {} {
                mstore(resultRemainder, mload(subject))
                resultRemainder := add(resultRemainder, 0x20)
                subject := add(subject, 0x20)
            }
            // Allocate memory for the length and the bytes, rounded up to a multiple of 32.
            mstore(0x40, add(result, and(add(k, 64), not(31))))
            result := sub(result, 0x20)
            mstore(result, k)
        }
    }
}

bytes constant HYVM_BYTECODE =
    hex"";
